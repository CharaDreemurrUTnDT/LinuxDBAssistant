name: Build and Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pyinstaller and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow requests pywebview

      - name: Build and prepare release
        id: build_and_release
        shell: bash
        run: |
          set -e
          cd versions
          echo "Available folders:"
          ls -l
          highest_folder=$(find . -maxdepth 1 -type d -regex './[0-9]+(\.[0-9]+)?' | sed 's|./||' | sort -V | tail -n 1)
          echo "Highest folder: $highest_folder"
          cd "$highest_folder"

          echo "Listing .py files in $(pwd):"
          ls -l *.py || true
          shopt -s nullglob
          pyfiles=(*.py)
          if [ ${#pyfiles[@]} -eq 0 ]; then
            echo "No .py files found to build."
            exit 1
          fi
          for f in "${pyfiles[@]}"; do
            echo "Building $f"
            if [[ "$f" == *terminal* ]]; then
              pyinstaller --onefile --icon=../../db.ico "$f"
            else
              pyinstaller --onefile --icon=../../db.ico --noconsole "$f"
            fi
          done

          mkdir -p ../../../dist_upload
          cp dist/*.exe ../../../dist_upload/
          cd ..
          if [ -f "$highest_folder/changelog.md" ]; then
            cat "$highest_folder/changelog.md" > ../../release_body.md
          else
            echo "No changelog.md found in $highest_folder." > ../../release_body.md
          fi
          cd ../..
          echo "## Commit History" >> release_body.md
          git log --pretty=format:"- %h %s (%an, %ad)" --date=short >> release_body.md
          echo "tag=v$highest_folder" >> $GITHUB_OUTPUT
        # All outputs are handled within this step

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.build_and_release.outputs.tag }}
          name: Release ${{ steps.build_and_release.outputs.tag }}
          body_path: release_body.md
          files: dist_upload/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
