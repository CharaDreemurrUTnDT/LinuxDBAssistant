name: Windows Build and Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pyinstaller and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow requests pywebview

      - name: Find folder with highest number in versions/
        id: find-folder
        shell: bash
        run: |
          cd versions
          FOLDER=$(find . -maxdepth 1 -type d -regex './[0-9]+(\.[0-9]+)?' | sed 's|./||' | sort -V | tail -n 1)
          echo "FOLDER=versions/$FOLDER" >> $GITHUB_ENV
          echo "FOLDER_NAME=$FOLDER" >> $GITHUB_ENV
          echo "Folder with highest number: versions/$FOLDER"

      - name: List all .py scripts in target folder
        id: list-py
        shell: bash
        run: |
          cd $FOLDER
          ls *.py > ../pyfiles.txt || true # create list or empty file if none found
        env:
          FOLDER: ${{ env.FOLDER }}

      - name: Build all .py scripts with PyInstaller (--no-console if needed)
        shell: bash
        run: |
          cd $FOLDER
          for f in *.py; do
            if [[ "$f" == *terminal* ]]; then
              pyinstaller --onefile --icon=../../db.ico "$f"
            else
              pyinstaller --onefile --icon=../../db.ico --noconsole "$f"
            fi
          done
        env:
          FOLDER: ${{ env.FOLDER }}

      - name: Collect built EXEs
        run: |
          mkdir -p dist_upload
          cd $FOLDER/dist
          cp *.exe ../../../dist_upload/
        env:
          FOLDER: ${{ env.FOLDER }}

      - name: Prepare Release Notes
        id: release_notes
        shell: bash
        run: |
          echo "## Changelog" > release_body.md
          cat $FOLDER/changelog.md >> release_body.md
          echo -e "\n## Commit History\n" >> release_body.md
          git log --pretty=format:"- %h %s (%an, %ad)" --date=short >> release_body.md
        env:
          FOLDER: ${{ env.FOLDER }}

      - name: Get version tag (vX.X format from folder name)
        id: get_version
        run: |
          VERSION="v${FOLDER_NAME}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          FOLDER_NAME: ${{ env.FOLDER_NAME }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_body.md
          files: dist_upload/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
