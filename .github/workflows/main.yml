name: Windows Build and Release

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pyinstaller and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow requests pywebview

      - name: Build and prepare release
        id: build_and_release
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest -ErrorAction Stop
          Set-Location versions

          Write-Host "Available folders:"
          Get-ChildItem -Directory | ForEach-Object { Write-Host $_.Name }

          # Find highest-numbered folder
          $folders = Get-ChildItem -Directory | Where-Object { $_.Name -match '^\d+(\.\d+)?$' } | Sort-Object { [version]$_.Name }
          if (-not $folders) { Write-Error "No version folders found."; exit 1 }
          $highest_folder = $folders[-1].Name
          Write-Host "Highest folder: $highest_folder"
          Set-Location $highest_folder

          # Find and build all .py files
          $pyfiles = Get-ChildItem -Filter *.py
          if (-not $pyfiles) { Write-Error "No .py files found to build."; exit 1 }
          foreach ($f in $pyfiles) {
            $basename = [System.IO.Path]::GetFileNameWithoutExtension($f.Name)
            Write-Host "Building $($f.Name)..."
            if ($f.Name -like "*terminal*") {
              pyinstaller --onefile --icon=../../db.ico $($f.Name)
            } else {
              pyinstaller --onefile --icon=../../db.ico --noconsole $($f.Name)
            }
            # Optionally, re-rename output if needed (not necessary if PyInstaller output is correct)
            if (Test-Path "dist/$basename.exe") {
              Move-Item "dist/$basename.exe" "dist/$basename.exe" -Force
            }
          }

          # Handle changelog file: look for changelog.md or changelog
          if (Test-Path changelog.md) {
            Copy-Item changelog.md ../../../release_body.md
          } elseif (Test-Path changelog) {
            Copy-Item changelog ../../../release_body.md
          } else {
            "No changelog found." | Out-File ../../../release_body.md
          }

          # Prepare dist_upload directory and copy exes
          New-Item -Path ../../../dist_upload -ItemType Directory -Force | Out-Null
          Copy-Item dist/*.exe ../../../dist_upload/

          Set-Location ../..
          "`n## Commit History" | Add-Content release_body.md
          git log --pretty=format:"- %h %s (%an, %ad)" --date=short | Add-Content release_body.md
          "tag=v$highest_folder" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.build_and_release.outputs.tag }}
          name: Release ${{ steps.build_and_release.outputs.tag }}
          body_path: release_body.md
          files: dist_upload/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
